---
import type { EntryFieldTypes } from 'contentful/dist/types'

// library
import { contentfulClient } from '@/lib/contentful'

// types
import type { InsightSkeleton } from '@/lib/contentful'

type SiteMetaSkeleton = {
  contentTypeId: 'siteMasta'
  fields: {
    name: EntryFieldTypes.Text
    data: EntryFieldTypes.Object<Array<{ [Key in string]: string }>>
  }
}

const entriesSiteMeta = await contentfulClient.getEntries<SiteMetaSkeleton>({
  content_type: 'siteMasta',
})

const masta = entriesSiteMeta.items.find(item => item.fields.name == 'Masta')?.fields
const description = masta?.data?.find(c => c.key == 'description')?.value

const entriesInsight = await contentfulClient.getEntries<InsightSkeleton>({
  content_type: 'insight',
})

const posts = entriesInsight.items.map(item => {
  const { name, slug } = item.fields
  return {
    name,
    slug,
  }
})
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>Note -- Create, Connect, and Provide.</title>
    <meta name="description" content={description} />
  </head>
  <body>
    <h1>Note</h1>

    <ul class="font-black">
      <li>setting up esling</li>
      <li>make alias path</li>
      <li>add tailwindcss</li>
    </ul>

    <ul class="posts">
      {
        posts.map(post => {
          return (
            <li>
              <a href={`/n/${post.slug}`}>
                {post.name} - {post.slug}
              </a>
            </li>
          )
        })
      }
    </ul>
  </body>
</html>

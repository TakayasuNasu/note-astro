---
import { contentfulClient } from '@/lib/contentful'
import { Image } from 'astro:assets'
import type { AssetFields } from 'contentful'
import lib from 'zenn-markdown-html'

// layout
import Layout from '@layouts/Layout.astro'

// types
import type { InsightSkeleton } from '@/lib/contentful'

// components
import BodyCopyHeader from '@/components/BodyCopyHeader.astro'

// global style
import '@/styles/global.css'
import '@/styles/body-copy.scss'

type MarkdownHtml = (text: string, options?: {}) => string
type MarkdownHtmlAtBuild = { default: MarkdownHtml }

let markdownHtml: MarkdownHtml = lib

if (typeof lib !== 'function') {
  markdownHtml = (lib as MarkdownHtmlAtBuild).default
}

export async function getStaticPaths() {
  const entries = await contentfulClient.getEntries<InsightSkeleton>({
    content_type: 'insight',
  })

  const pages = entries.items.map(item => ({
    params: { slug: item.fields.slug },
    props: {
      slug: item.fields.slug,
      heading: item.fields.primaryHeading,
      heroImage: item.fields.heroImage as { fields: AssetFields },
      body: item.fields.body,
      publishedDate: item.fields.publishedDate,
      tags: item.fields.tags,
    },
  }))

  return pages
}
const { slug, heading, heroImage, body, publishedDate, tags } = Astro.props
const html = markdownHtml(body, {
  embedOrigin: 'https://embed.zenn.studio',
})
---

<Layout title={`${heading} | Takayasu Nasu | insight`} description="">
  <article>
    <figure>
      {
        heroImage.fields.file && (
          <Image
            src={`${heroImage.fields.file.url}?fm=webp`}
            width={heroImage.fields.file.details.image?.width || 200}
            height={heroImage.fields.file.details.image?.height || 100}
            alt={`Hero`}
            format="webp"
            loading="eager"
            class="object-cover w-full h-full"
          />
        )
      }
    </figure>

    <h1 class="font-bold">{heading}</h1>

    <BodyCopyHeader {...{ slug, publishedDate }} />

    <div class="body-copy">
      <Fragment set:html={html} />
    </div>

    {
      tags && (
        <ul class="tags flex flex-wrap">
          {tags.map((tag: string) => {
            return (
              <li>
                <a href="">#{tag}</a>
              </li>
            )
          })}
        </ul>
      )
    }
  </article>
</Layout>

<style lang="scss">
  article {
    margin-inline: auto;
    width: 94%;

    @media (min-width: 768px) {
      width: 688px;
    }

    @media (min-width: 1024px) {
      width: 620px;
    }
  }

  figure {
    margin-inline: calc(50% - 50vw);
    aspect-ratio: 39/20;

    @media (min-width: 1024px) {
      margin-top: 48px;
      margin-inline: unset;
    }
  }

  h1 {
    margin-top: min(14vw, 64px);
    font-size: var(--heading-size-large);
  }

  div.body-copy {
    margin-top: 36px;
  }

  ul.tags {
    gap: 8px;
    margin-top: 36px;

    @media (min-width: 768px) {
      margin-top: 48px;
    }

    a {
      padding: 4px 10px;
      font-size: 14px;
      color: var(--accent-dark);
      border: solid 1px var(--accent-dark);

      &:hover {
        color: var(--accent-light);
        border: solid 1px var(--accent-light);
        transition: 0.4s;
      }
    }
  }
</style>
